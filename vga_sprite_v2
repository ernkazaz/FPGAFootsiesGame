module FSM_Game (
    input clk_50MHz,
    input reset,
    input move_right,
    input move_left,
    output [7:0] red,
    output [7:0] green,
    output [7:0] blue,
    output hsync,
    output vsync,
    output sync,
    output clk,
    output blank
);

    wire clk_25MHz;
    wire clk_60Hz;
    wire [7:0] color_out;
    wire [9:0] pixel_x, pixel_y;

    clock_divider #(2) clkdiv (
        .clk_in(clk_50MHz),
        .clk_out(clk_25MHz)
    );

    clock_divider #(833334) clkdiv2 (
        .clk_in(clk_50MHz),
        .clk_out(clk_60Hz)
    );

    reg [9:0] sprite_x = 288;
    wire [9:0] sprite_y = 120;

	 wire [7:0] background_color = 8'b111_111_11;
	 wire [7:0] sprite_color = 8'b111_000_00;

    wire inside_sprite = (pixel_x >= sprite_x) && (pixel_x < sprite_x + 64) &&
                         (pixel_y >= sprite_y) && (pixel_y < sprite_y + 240);

	 assign color_out = inside_sprite ? sprite_color : background_color;

    wire logic_clk = clk_60Hz;

    localparam IDLE       = 2'b00;
    localparam MOVE_LEFT  = 2'b01;
    localparam MOVE_RIGHT = 2'b10;

    reg [1:0] current_state, next_state;

    always @(*) begin
        case (current_state)
            IDLE: begin
                if (move_left && ~move_right)
                    next_state = MOVE_LEFT;
                else if (move_right && ~move_left)
                    next_state = MOVE_RIGHT;
                else
                    next_state = IDLE;
            end

            MOVE_LEFT: begin
                if (move_left && ~move_right)
                    next_state = MOVE_LEFT;
                else if (move_right && ~move_left)
                    next_state = MOVE_RIGHT;
                else
                    next_state = IDLE;
            end

            MOVE_RIGHT: begin
                if (move_right && ~move_left)
                    next_state = MOVE_RIGHT;
					 else if (move_left && ~move_right)
                    next_state = MOVE_LEFT;                 
                else
                    next_state = IDLE;
            end

            default: next_state = IDLE;
        endcase
    end

    always @(posedge logic_clk) begin
        current_state <= next_state;
    end

    always @(posedge logic_clk) begin
            case (current_state)
                MOVE_LEFT:
                    if (sprite_x < (640 - 64))
                        sprite_x <= sprite_x + 2;
                MOVE_RIGHT:
						  if (sprite_x > 0)
                        sprite_x <= sprite_x - 3;
                default:
                    sprite_x <= sprite_x; // No movement
            endcase
    end

    // VGA driver instantiation
    vga_driver vga (
        .clock(clk_25MHz),
        .reset(reset),
        .color_in(color_out),
        .next_x(pixel_x),
        .next_y(pixel_y),
        .hsync(hsync),
        .vsync(vsync),
        .red(red),
        .green(green),
        .blue(blue),
        .sync(sync),
        .clk(clk),
        .blank(blank)
    );

endmodule
