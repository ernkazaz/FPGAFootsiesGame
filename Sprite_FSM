module Sprite_FSM (
	input clk,
	input reset,
	input left,
	input right,
	input attack,
	output reg [2:0] state,
	output reg move_flag,
	output reg directional_attack_flag,
	output reg attack_flag
);

	localparam [2:0] 
		S_IDLE = 3'd0,
		S_Backward = 3'd1,
		S_Forward = 3'd2,
		S_Attack_start = 3'd3,
		S_Attack_active = 3'd4,
		S_Attack_recovery = 3'd5;
	
	reg [2:0] current_state,next_state;
	
	
	always @(posedge clk) begin
		if (reset) begin
			current_state <= S_IDLE;
			state <= current_state;
		end else begin 
			current_state <= next_state;
			state <= current_state;
		end
	end
	
	always @(*) begin
		case(state)
	
	
			S_IDLE: begin
				next_state = S_IDLE;
				if (left) begin
					next_state = S_Backward;
				end else if (right) begin
					next_state = S_Forward;
				end else if (attack) begin
					next_state = S_Attack_start;
				end
			end
			
			
			S_Backward: begin
                if (left) begin
                    next_state = S_Backward;
                end else if (right) begin
                    next_state = S_Forward;
                end else if (attack) begin
                    next_state = S_Attack_start;
                end else begin
                    next_state = S_IDLE;
                end
            end
			
			
			S_Forward: begin
                if (left) begin
                    next_state = S_Backward;
                end else if (right) begin
                    next_state = S_Forward;
                end else if (attack) begin
                    next_state = S_Attack_start;
                end else begin
                    next_state = S_IDLE;
                end
            end
			
			
			S_Attack_start: begin
				next_state = S_Attack_active;
			end
			
			
			S_Attack_active: begin
				next_state = S_Attack_recovery;
			end
			
			
			S_Attack_recovery: begin
				next_state = S_IDLE;
			end 
			
			default: begin 
				next_state = S_IDLE;
			end
		endcase
	end	
		
		
		always @(*) begin
			move_flag = 0;
			directional_attack_flag = 0;
			attack_flag = 0;
			
			
			case(current_state)
			
				S_Backward, S_Forward : begin
					move_flag = 1;
					directional_attack_flag = (attack) ? 1 : 0;
				end
			
				S_Attack_start, S_Attack_active: begin
					attack_flag = 1;
				end
				default: begin
					move_flag = 0;
					directional_attack_flag = 0;
					attack_flag = 0;
				end
			endcase
		end	
			
		
endmodule
















